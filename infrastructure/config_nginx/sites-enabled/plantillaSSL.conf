## Configuración NGINX con SSL activo
# Este archivo se ubicará en la carpeta sites-enabled y se renombrará:
# - Ejemplo: tudominio.es.conf

## Renombrar:
# - NombreContenedor: nombre del contenedor. 1 cambio - linea 14
# - puerto: por el puerto al que se reenvia. 1 cambio - linea 14 
# - tudominio.es: por el nombre de tu dominio. 5 cambios
# - Para los log de cada proyecto:
#    - access_nombreProyecto.log. 2 cambios
#    - error_nombreProyecto.log. 2 cambios
# * Lo más práctico es buscar y remplazar XD

##-------- REDIRECCIONES --------##
# Servidor upstream
upstream mi_server {
    server NombreContenedor:puerto;
}

##-------- WEB --------##
server {

    listen 80;
        server_name tudominio.es;
    
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /etc/letsencrypt;
        allow all;
        try_files $uri =404;
    }
    
    location ~ {
        return 301 https://$host$request_uri;

    }

    #Carpeta de registros
        access_log /var/log/nginx/access_nombreProyecto.log;  
        error_log /var/log/nginx/error_nombreProyecto.log;
}

server {
    listen 443 ssl;
    server_name tudominio.es;

    ## --------- Control de certificados --------- ## 
    ## Elegir si certbot o descargados. Comentar el que no se use:

    ## Si se usa certbot (comprobar que se has renombrado tudominio.es por el correspondiente)
    ssl_certificate /etc/letsencrypt/live/tudominio.es/fullchain.pem; # Especifica la ubicación de tu certificado
    ssl_certificate_key /etc/letsencrypt/live/tudominio.es/privkey.pem; # Especifica la ubicación de tu clave privada

    ## Para usarlo con ZeroSSL o certificados descargados, deberás crear la carpeta en la ruta ./infrastructure/ssl/zerossl/tudominio.es
    ssl_certificate /etc/nginx/ssl/zerossl/tudominio.es/certificate.crt;
    ssl_certificate_key /etc/nginx/ssl/zerossl/tudominio.es/private.key;
    ssl_trusted_certificate /etc/nginx/ssl/zerossl/tudominio.es/ca_bundle.crt;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ## ---------

    location / {
        
        ##  --------- Bloqueando acceso por IP --------- ## 
        ## Para el bloqueo de todo y permitir una:
        allow 80.58.28.23;  # Permite la conexión a esta IP
        deny all; # Bloquea acceso a cualquier conexión
        ## Para el bloqueo de una y permitir todo:
        deny 80.58.28.23;   # Bloquear acceso solo a esta IP
        allow all;          # Permitir todas las demás conexiones
        ## ---------


        ## --------- Control de contraseña --------- ## 
        ## *Comenta si no quieres usarlo
        auth_basic "Area Restringida";
        auth_basic_user_file /etc/nginx/.htpasswd;
        ## ---------


        ## Nota por si en algún momento se usa una api dentro de una carpeta:
        ## Lo que esto hace es poner la carpeta como raiz.
        ## En este ejemplo la carpeta se llamaría api.
        # rewrite ^/api(.*)$ $1 break;
        

        ### --------- Tipo de conexión --------- ## 
        ## *Comenta el que no uses
        
        ## Se usa con uwsgi
        include uwsgi_params;
        uwsgi_pass mi_server;
        
        ## Se usa para probarlo sin uwsgi para el backend
        proxy_pass http://mi_server;
        ## ---------


        # Establece el encabezado Host para el proxy.
        proxy_set_header Host $host;
        # Establece el encabezado X-Real-IP para el proxy.
        proxy_set_header X-Real-IP $remote_addr;
        # Establece el encabezado X-Forwarded-For para el proxy.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Establece el encabezado Content-Type para el proxy.
        proxy_set_header Content-Type $http_content_type;
        # Establece el encabezado Content-Length para el proxy
        proxy_set_header Content-Length $http_content_length;
        # Determina si es http o https la cabecera y por algunos frameworks
        proxy_set_header X-Forwarded-Proto $scheme;
        # Define la versión de HTTP para el proxy.
        proxy_http_version 1.1;
        # Se usa para Websockets.
        proxy_set_header Upgrade $http_upgrade;
        # Se usa para Websockets.
        proxy_set_header Connection "Upgrade";
        # Control de manejo del tamaño de archivo recibido
        client_max_body_size 50M; 
    
        # Encabezados Cors, permite que el navegador realice las solicitudes
        # Si deseas restringir el acceso solo a orígenes específicos, reemplazar el * con el origen permitido.
        # Por ejemplo, add_header Access-Control-Allow-Origin http://ip_publica:20222;
        
        # Permitir el acceso a todos.
        ###add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Origin "tudominio.es";
        # Establece los métodos HTTP permitidos para las solicitudes desde un origen externo.
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
        # Establece los encabezados personalizados permitidos en las solicitudes CORS. Los encabezados mencionados en la directiva, 
        #  como DNT, User-Agent, X-Requested-With, etc.
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-access-token';
        # Define qué encabezados pueden ser expuestos en la respuesta a una solicitud CORS. En este caso, se exponen los encabezados Content-Length 
        #  y Content-Range. Esto significa que el cliente que realice la solicitud CORS puede acceder a los valores de estos encabezados en la respuesta.
        add_header Access-Control-Expose-Headers 'Content-Length,Content-Range';
    }
    # Carpeta de registros
    access_log /var/log/nginx/access_nombreProyecto.log;  
    error_log /var/log/nginx/error_nombreProyecto.log;
}
